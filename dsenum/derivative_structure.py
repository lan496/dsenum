from typing import List, Union

import numpy as np
from pymatgen.core import Lattice, Structure
from pymatgen.core.periodic_table import Specie, DummySpecie, Element
from pymatgen.core.sites import PeriodicSite

import dsenum
from dsenum.converter import DerivativeMultiLatticeHash


class ColoringToStructure:
    def __init__(
        self,
        base_structure: Structure,
        dshash: DerivativeMultiLatticeHash,
        mapping_color_to_species: List[Union[str, Element, Specie, DummySpecie]],
        additional_species=None,
        additional_frac_coords=None,
    ):
        """
        Parameters
        ----------
        base_structure:
            Structure with only ordering species
        dshash:
        mapping_color_to_species:
        additional_species: list of pymatgen.core.Species, optional
            species which are nothing to do with ordering
        additional_frac_coords: np.ndarray, optional
            fractional coordinates of species which are nothing to do with ordering
        """
        self.base_structure = base_structure
        self.dshash = dshash
        self.mapping_color_to_species = mapping_color_to_species

        self.lattice_matrix = np.dot(self.base_matrix.T, self.dshash.hnf).T
        # lattice of derivative structure
        self.lattice = Lattice(self.lattice_matrix)

        self.canonical_derivative_sites = dshash.get_canonical_and_derivative_sites_list()

        list_coords = []
        for _, dsite in self.canonical_derivative_sites:
            coords = dshash.get_frac_coords(dsite)
            cart_coords = np.dot(coords, self.base_matrix)
            list_coords.append(cart_coords)
        self.list_coords = list_coords

        self.precomputed_psites = [
            [
                PeriodicSite(sp, coords, self.lattice, coords_are_cartesian=True)
                for sp in self.mapping_color_to_species
            ]
            for coords in self.list_coords
        ]

        # additional fixed sites
        self.additional_species = additional_species
        self.additional_frac_coords = additional_frac_coords
        self.additional_species_str = None
        if self.additional_species is not None:
            assert len(self.additional_species) == len(self.additional_frac_coords)
            self.additional_species_str = [str(specie) for specie in self.additional_species]

        self.additional_psites = []
        if self.additional_species is not None:
            lattice_points = self.dshash.get_lattice_points()
            for sp, disp in zip(self.additional_species, self.additional_frac_coords):
                cart_coords = [
                    np.dot(np.array(disp) + np.array(lp), self.base_matrix)
                    for lp in lattice_points
                ]
                self.additional_psites.extend(
                    [
                        PeriodicSite(sp, coords, self.lattice, coords_are_cartesian=True)
                        for coords in cart_coords
                    ]
                )

        # map color to specie str (e.g. 0 -> "Cu")
        self.mapping_color_to_species_str = [
            str(specie) for specie in self.mapping_color_to_species
        ]

    @property
    def base_matrix(self):
        return self.base_structure.lattice.matrix

    def convert_to_structure(self, coloring) -> Structure:
        list_psites = [
            self.precomputed_psites[i][coloring[i]] for i in range(self.dshash.num_sites)
        ]
        if self.additional_psites is not None:
            list_psites.extend(self.additional_psites)

        dstruct = Structure.from_sites(list_psites)

        return dstruct

    def convert_to_poscar_string(self, coloring) -> str:
        list_psites = [
            self.precomputed_psites[i][coloring[i]] for i in range(self.dshash.num_sites)
        ]
        if self.additional_psites is not None:
            list_psites.extend(self.additional_psites)

        # ref: https://www.vasp.at/wiki/index.php/POSCAR
        lines = []

        version = dsenum.__version__
        comment = f"generated by dsenum {version}"
        lines.append(comment)

        # scale
        lines.append("1.0")

        # lattice vectors
        for i in range(3):
            v = self.lattice_matrix
            lines.append(f"{v[i][0]} {v[i][1]} {v[i][2]}")

        # species
        list_species = [
            self.mapping_color_to_species_str[coloring[i]] for i in range(self.dshash.num_sites)
        ]
        counter = []
        element = None
        count = 0
        for species_str in list_species:
            if element is None:
                element = species_str
                count += 1
            elif species_str == element:
                count += 1
            else:
                counter.append([element, count])
                element = species_str
                count = 1
        if element is not None:
            counter.append([element, count])
        lines.append(" ".join([element for element, _ in counter]))
        lines.append(" ".join([str(count) for _, count in counter]))

        # fractional coords
        lines.append("Direct")
        for psite in list_psites:
            fc = psite.frac_coords
            lines.append(f"{fc[0]} {fc[1]} {fc[2]}")

        poscar_str = "\n".join(lines)
        return poscar_str
